import 'dart:developer';

import 'package:flutter/services.dart';
import 'package:simple_flutter/core/shared_feature/chat_util/domain/contract_repo/chat_user_repo_abs.dart';
import 'package:simple_flutter/feature/auth/domain/entity/user_entity.dart';
import 'package:couchbase_lite/couchbase_lite.dart';


import 'package:flutter_chat_types/flutter_chat_types.dart' as types;

class ChatUserRepoImpl implements ChatUserRepoAbs {

  final Database database;
  
  ChatUserRepoImpl({required this.database});

  @override
  Future registerUserChat({required UserEntity user}) async {
    log('register user id ${user.id}');
    // final userRef = firebaseFirestore.collection('user');
    // await userRef.doc(user.id).set({
    //   'uid': user.id,
    //   'displayName': user.name,
    //   'photoUrl': user.photoUrl
    // });

    final lol =  types.User(id: "").toJson();

    // Create a new document (i.e. a record) in the database.
    MutableDocument? mutableDoc =
    MutableDocument();

    mutableDoc.setString("uid", user.id);
    mutableDoc.setString("displayName", user.name);
    mutableDoc.setString("photoUrl", user.photoUrl);



    // Save it to the database.
    try {
      await database.saveDocument(mutableDoc);
    } on PlatformException {
      return "Error saving document";
    }

    // Update a document.
    // mutableDoc = (await database.document(mutableDoc.id!))
    //     ?.toMutable()
    //     .setString("wonderful_world", "Dart");

    if (mutableDoc != null) {
      // Save it to the database.
      try {
        await database.saveDocument(mutableDoc);

        var document = await (database.document(mutableDoc.id!));

        // Log the document ID (generated by the database)
        // and properties
        // print("Document ID :: ${document!.id}");
        print("Learning ${document.getString("language")}");
      } on PlatformException {
        return "Error saving document";
      }
    }

    return;
  }
}
